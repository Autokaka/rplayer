// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int RPlayer_CreateFromURL(
    ffi.Pointer<ffi.Int8> url,
  ) {
    return _RPlayer_CreateFromURL(
      url,
    );
  }

  late final _RPlayer_CreateFromURLPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'RPlayer_CreateFromURL');
  late final _RPlayer_CreateFromURL = _RPlayer_CreateFromURLPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>)>();

  int RPlayer_GetStatus(
    int id,
  ) {
    return _RPlayer_GetStatus(
      id,
    );
  }

  late final _RPlayer_GetStatusPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'RPlayer_GetStatus');
  late final _RPlayer_GetStatus =
      _RPlayer_GetStatusPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Int8> RPlayer_GetError(
    int id,
  ) {
    return _RPlayer_GetError(
      id,
    );
  }

  late final _RPlayer_GetErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'RPlayer_GetError');
  late final _RPlayer_GetError =
      _RPlayer_GetErrorPtr.asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  void RPlayer_Play(
    int id,
  ) {
    return _RPlayer_Play(
      id,
    );
  }

  late final _RPlayer_PlayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>('RPlayer_Play');
  late final _RPlayer_Play = _RPlayer_PlayPtr.asFunction<void Function(int)>();

  void RPlayer_Pause(
    int id,
  ) {
    return _RPlayer_Pause(
      id,
    );
  }

  late final _RPlayer_PausePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>(
          'RPlayer_Pause');
  late final _RPlayer_Pause =
      _RPlayer_PausePtr.asFunction<void Function(int)>();

  void RPlayer_Release(
    int id,
  ) {
    return _RPlayer_Release(
      id,
    );
  }

  late final _RPlayer_ReleasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>(
          'RPlayer_Release');
  late final _RPlayer_Release =
      _RPlayer_ReleasePtr.asFunction<void Function(int)>();
}
