// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Create RPlayer instance,
  /// initialize its state, and
  /// return that pointer to Dart
  /// side.
  ffi.Pointer<ffi.Void> RPlayer_createInstance() {
    return _RPlayer_createInstance();
  }

  late final _RPlayer_createInstance_ptr =
      _lookup<ffi.NativeFunction<_c_RPlayer_createInstance>>(
          'RPlayer_createInstance');
  late final _dart_RPlayer_createInstance _RPlayer_createInstance =
      _RPlayer_createInstance_ptr.asFunction<_dart_RPlayer_createInstance>();

  /// Create decode thread using FFmpeg.
  ///
  /// @param void* pPlayer.
  /// @param char* url.
  int RPlayer_createDecodeThread(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _RPlayer_createDecodeThread(
      arg0,
      arg1,
    );
  }

  late final _RPlayer_createDecodeThread_ptr =
      _lookup<ffi.NativeFunction<_c_RPlayer_createDecodeThread>>(
          'RPlayer_createDecodeThread');
  late final _dart_RPlayer_createDecodeThread _RPlayer_createDecodeThread =
      _RPlayer_createDecodeThread_ptr.asFunction<
          _dart_RPlayer_createDecodeThread>();

  void RPlayer_setPlaying(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _RPlayer_setPlaying(
      arg0,
    );
  }

  late final _RPlayer_setPlaying_ptr =
      _lookup<ffi.NativeFunction<_c_RPlayer_setPlaying>>('RPlayer_setPlaying');
  late final _dart_RPlayer_setPlaying _RPlayer_setPlaying =
      _RPlayer_setPlaying_ptr.asFunction<_dart_RPlayer_setPlaying>();

  void RPlayer_setPaused(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _RPlayer_setPaused(
      arg0,
    );
  }

  late final _RPlayer_setPaused_ptr =
      _lookup<ffi.NativeFunction<_c_RPlayer_setPaused>>('RPlayer_setPaused');
  late final _dart_RPlayer_setPaused _RPlayer_setPaused =
      _RPlayer_setPaused_ptr.asFunction<_dart_RPlayer_setPaused>();

  void RPlayer_setConfig(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _RPlayer_setConfig(
      arg0,
      arg1,
    );
  }

  late final _RPlayer_setConfig_ptr =
      _lookup<ffi.NativeFunction<_c_RPlayer_setConfig>>('RPlayer_setConfig');
  late final _dart_RPlayer_setConfig _RPlayer_setConfig =
      _RPlayer_setConfig_ptr.asFunction<_dart_RPlayer_setConfig>();

  /// Release all resources used in decode thread.
  void RPlayer_dispose(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _RPlayer_dispose(
      arg0,
    );
  }

  late final _RPlayer_dispose_ptr =
      _lookup<ffi.NativeFunction<_c_RPlayer_dispose>>('RPlayer_dispose');
  late final _dart_RPlayer_dispose _RPlayer_dispose =
      _RPlayer_dispose_ptr.asFunction<_dart_RPlayer_dispose>();

  int RPlayer_getHeight(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _RPlayer_getHeight(
      arg0,
    );
  }

  late final _RPlayer_getHeight_ptr =
      _lookup<ffi.NativeFunction<_c_RPlayer_getHeight>>('RPlayer_getHeight');
  late final _dart_RPlayer_getHeight _RPlayer_getHeight =
      _RPlayer_getHeight_ptr.asFunction<_dart_RPlayer_getHeight>();

  int RPlayer_getWidth(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _RPlayer_getWidth(
      arg0,
    );
  }

  late final _RPlayer_getWidth_ptr =
      _lookup<ffi.NativeFunction<_c_RPlayer_getWidth>>('RPlayer_getWidth');
  late final _dart_RPlayer_getWidth _RPlayer_getWidth =
      _RPlayer_getWidth_ptr.asFunction<_dart_RPlayer_getWidth>();

  int RPlayer_getState(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _RPlayer_getState(
      arg0,
    );
  }

  late final _RPlayer_getState_ptr =
      _lookup<ffi.NativeFunction<_c_RPlayer_getState>>('RPlayer_getState');
  late final _dart_RPlayer_getState _RPlayer_getState =
      _RPlayer_getState_ptr.asFunction<_dart_RPlayer_getState>();

  ffi.Pointer<ffi.Int8> RPlayer_getMessage(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _RPlayer_getMessage(
      arg0,
    );
  }

  late final _RPlayer_getMessage_ptr =
      _lookup<ffi.NativeFunction<_c_RPlayer_getMessage>>('RPlayer_getMessage');
  late final _dart_RPlayer_getMessage _RPlayer_getMessage =
      _RPlayer_getMessage_ptr.asFunction<_dart_RPlayer_getMessage>();

  int RPlayer_getTextureId(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _RPlayer_getTextureId(
      arg0,
    );
  }

  late final _RPlayer_getTextureId_ptr =
      _lookup<ffi.NativeFunction<_c_RPlayer_getTextureId>>(
          'RPlayer_getTextureId');
  late final _dart_RPlayer_getTextureId _RPlayer_getTextureId =
      _RPlayer_getTextureId_ptr.asFunction<_dart_RPlayer_getTextureId>();

  /// See [src/config.h] for the definitions
  /// of RPlayerConfig.
  ffi.Pointer<ffi.Void> RPlayerConfig_createInstance() {
    return _RPlayerConfig_createInstance();
  }

  late final _RPlayerConfig_createInstance_ptr =
      _lookup<ffi.NativeFunction<_c_RPlayerConfig_createInstance>>(
          'RPlayerConfig_createInstance');
  late final _dart_RPlayerConfig_createInstance _RPlayerConfig_createInstance =
      _RPlayerConfig_createInstance_ptr.asFunction<
          _dart_RPlayerConfig_createInstance>();

  void RPlayerConfig_setRetryTimesOnDisconnect(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return _RPlayerConfig_setRetryTimesOnDisconnect(
      arg0,
      arg1,
    );
  }

  late final _RPlayerConfig_setRetryTimesOnDisconnect_ptr =
      _lookup<ffi.NativeFunction<_c_RPlayerConfig_setRetryTimesOnDisconnect>>(
          'RPlayerConfig_setRetryTimesOnDisconnect');
  late final _dart_RPlayerConfig_setRetryTimesOnDisconnect
      _RPlayerConfig_setRetryTimesOnDisconnect =
      _RPlayerConfig_setRetryTimesOnDisconnect_ptr.asFunction<
          _dart_RPlayerConfig_setRetryTimesOnDisconnect>();

  void RPlayerConfig_setRetryDelayInMilliseconds(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return _RPlayerConfig_setRetryDelayInMilliseconds(
      arg0,
      arg1,
    );
  }

  late final _RPlayerConfig_setRetryDelayInMilliseconds_ptr =
      _lookup<ffi.NativeFunction<_c_RPlayerConfig_setRetryDelayInMilliseconds>>(
          'RPlayerConfig_setRetryDelayInMilliseconds');
  late final _dart_RPlayerConfig_setRetryDelayInMilliseconds
      _RPlayerConfig_setRetryDelayInMilliseconds =
      _RPlayerConfig_setRetryDelayInMilliseconds_ptr.asFunction<
          _dart_RPlayerConfig_setRetryDelayInMilliseconds>();

  void RPlayerConfig_setPreferHardcodec(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return _RPlayerConfig_setPreferHardcodec(
      arg0,
      arg1,
    );
  }

  late final _RPlayerConfig_setPreferHardcodec_ptr =
      _lookup<ffi.NativeFunction<_c_RPlayerConfig_setPreferHardcodec>>(
          'RPlayerConfig_setPreferHardcodec');
  late final _dart_RPlayerConfig_setPreferHardcodec
      _RPlayerConfig_setPreferHardcodec = _RPlayerConfig_setPreferHardcodec_ptr
          .asFunction<_dart_RPlayerConfig_setPreferHardcodec>();
}

typedef _c_RPlayer_createInstance = ffi.Pointer<ffi.Void> Function();

typedef _dart_RPlayer_createInstance = ffi.Pointer<ffi.Void> Function();

typedef _c_RPlayer_createDecodeThread = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_RPlayer_createDecodeThread = int Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_RPlayer_setPlaying = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_RPlayer_setPlaying = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_RPlayer_setPaused = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_RPlayer_setPaused = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_RPlayer_setConfig = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _dart_RPlayer_setConfig = void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _c_RPlayer_dispose = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_RPlayer_dispose = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_RPlayer_getHeight = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_RPlayer_getHeight = int Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_RPlayer_getWidth = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_RPlayer_getWidth = int Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_RPlayer_getState = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_RPlayer_getState = int Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_RPlayer_getMessage = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_RPlayer_getMessage = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_RPlayer_getTextureId = ffi.Int64 Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_RPlayer_getTextureId = int Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_RPlayerConfig_createInstance = ffi.Pointer<ffi.Void> Function();

typedef _dart_RPlayerConfig_createInstance = ffi.Pointer<ffi.Void> Function();

typedef _c_RPlayerConfig_setRetryTimesOnDisconnect = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Int32 arg1,
);

typedef _dart_RPlayerConfig_setRetryTimesOnDisconnect = void Function(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
);

typedef _c_RPlayerConfig_setRetryDelayInMilliseconds = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Int32 arg1,
);

typedef _dart_RPlayerConfig_setRetryDelayInMilliseconds = void Function(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
);

typedef _c_RPlayerConfig_setPreferHardcodec = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Int32 arg1,
);

typedef _dart_RPlayerConfig_setPreferHardcodec = void Function(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
);
